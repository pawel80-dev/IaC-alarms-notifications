name: 'Alarms notifcations dev'

on:
  push:
    branches:
      - 'dev'

  # Workflow needs to be started manually
  workflow_dispatch:
    inputs:
      action_type:
        description: 'Config generator runtime env:'
        required: true
        default: 'Display-services-data'
        type: choice
        options:
          - Display-services-data
          - Function-code-deploy
          - Add-env-variable
          - Add-service
          - Remove-the-service
          - Manager-configuration
      service_sid:
        description: 'Service SID:'
        required: false
        type: string
        default: ''
      func_sid:
        description: 'Function SID:'
        required: false
        type: string
        default: ''
      env_sid:
        description: 'Environment SID:'
        required: false
        type: string
        default: ''
      service_name:
        description: 'Service Name:'
        required: false
        type: string
        default: ''
      func_name:
        description: 'Function Name:'
        required: false
        type: string
        default: ''
      env_type:
        description: 'Environment:'
        required: false
        type: string
        default: ''
      var_key:
        description: 'Env Key:'
        required: false
        type: string
        default: ''
      var_value:
        description: 'Env Value:'
        required: false
        type: string
        default: ''

env:
  TW_ACCOUNT_SID: ${{ secrets.TW_ACCOUNT_SID }}
  TW_AUTH_TOKEN: ${{ secrets.TW_AUTH_TOKEN }}
  PY_CODE_PATH: 'source'
  NODE_JS_CODE_PATH: 'source/alarm_func.js'
  TW_URL: 'https://serverless.twilio.com/v1/Services'
  TW_CODE_URL: 'https://serverless-upload.twilio.com/v1/Services'
  webhook_url: 'https://alarms2-1827-dev.twil.io/api?alarmtype=intstatus'


##################### Twilio Function Deployment Steps: #####################
# 1. Create a service
# 2. Create a Function
# 3. Create an environment (dev, prod, etc)
# 4. Create environment variables (if needed and if they already do not exist)
# 5. Upload (update) your function code as a new Function Version
# 6. Create a new Build that includes your Function Version
# 7. Deploy the Build to your desired Environment

jobs:
  twilio_function_and_manager:
    name: 'Twilio Function and Manager'
    # if: ${{ github.event_name != 'workflow_dispatch' }}
    runs-on: self-hosted
    # runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v5

      - name: 'Python: Install'
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          architecture: 'x64'

      - name: 'Python: Install dependencies'
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r ${{ env.PY_CODE_PATH }}/requirements.txt

      - name: 'Twilio: Display available services information'
        if: ${{ github.event.inputs.action_type == 'Display-services-data' }}
        run: |
          python ${{ env.PY_CODE_PATH }}/twilio_service_data.py \
                 ${{ env.TW_URL }} \
                 ${{ secrets.TW_ACCOUNT_SID }} \
                 ${{ secrets.TW_AUTH_TOKEN }}

      - name: 'Twilio: Function build deploy'
        if: ${{ github.event.inputs.action_type == 'Function-code-deploy' }}
        run: |
          python ${{ env.PY_CODE_PATH }}/twilio_func_code_deploy.py \
                 ${{ env.TW_URL }} \
                 ${{ env.TW_CODE_URL }} \
                 ${{ secrets.TW_ACCOUNT_SID }} \
                 ${{ secrets.TW_AUTH_TOKEN }} \
                 ${{ github.event.inputs.service_sid }} \
                 ${{ github.event.inputs.func_sid }} \
                 ${{ github.event.inputs.env_sid }} \
                 ${{ env.NODE_JS_CODE_PATH }}

      - name: 'Twilio: Add environment variable'
        if: >-
          ${{
            github.event.inputs.action_type == 'Add-env-variable' &&
            github.event.inputs.service_sid != '' &&
            github.event.inputs.env_sid != '' &&
            github.event.inputs.var_key != '' &&
            github.event.inputs.var_value != ''
          }}
        run: |
          python ${{ env.PY_CODE_PATH }}/twilio_env_var.py \
                 ${{ env.TW_URL }} \
                 ${{ secrets.TW_ACCOUNT_SID }} \
                 ${{ secrets.TW_AUTH_TOKEN }} \
                 ${{ github.event.inputs.service_sid }} \
                 ${{ github.event.inputs.env_sid }} \
                 '${{ github.event.inputs.var_key }}' \
                 '${{ github.event.inputs.var_value }}'

      - name: 'Twilio: Add Service and Function'
        if: >-
          ${{
            github.event.inputs.action_type == 'Add-service' &&
            github.event.inputs.service_name != '' &&
            github.event.inputs.func_name != '' &&
            github.event.inputs.env_type != ''
          }}
        run: |
          python ${{ env.PY_CODE_PATH }}/twilio_service_add.py \
                 ${{ env.TW_URL }} \
                 ${{ secrets.TW_ACCOUNT_SID }} \
                 ${{ secrets.TW_AUTH_TOKEN }} \
                 ${{ github.event.inputs.service_name }} \
                 ${{ github.event.inputs.func_name }} \
                 ${{ github.event.inputs.env_type }}

      - name: 'Twilio: Service remove'
        if: ${{ github.event.inputs.action_type == 'Remove-the-service' && github.event.inputs.service_sid != '' }}
        run: |
          python ${{ env.PY_CODE_PATH }}/twilio_service_remove.py \
                 ${{ env.TW_URL }} \
                 ${{ secrets.TW_ACCOUNT_SID }} \
                 ${{ secrets.TW_AUTH_TOKEN }} \
                 ${{ github.event.inputs.service_sid }}

      - name: 'Manager: Connectivity test'
        if: ${{ github.event.inputs.action_type == 'Manager-configuration' }}
        run: |
          python ${{ env.PY_CODE_PATH }}/manager_alarms_config.py \
                 ${{ secrets.C_MANAGER_URL }} \
                 ${{ secrets.C_MANAGER_LOGIN }} \
                 ${{ secrets.C_MANAGER_PASSWORD }} \
                 ${{ secrets.C_MANAGER_WEBHOOK_USER }} \
                 ${{ secrets.C_MANAGER_WEBHOOK_PASS }} \
                 ${{ env.webhook_url }}
